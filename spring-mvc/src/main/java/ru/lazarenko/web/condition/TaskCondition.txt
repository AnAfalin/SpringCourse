[__Part 1__]
1.	Настроить Spring MVC:
- написать стандартный конфигурационный класс,
- написать Web-конфигурационный класс,
- подключить Tomcat.
Запустить приложение. Проверить, что в логах нет ошибок, и приложение запущено успешно.

2.	Написать простой контроллер, который отвечает на запрос localhost:8080/hello любое сообщение.

3.	Написать второй контроллер, который оправляет строковое представление объектов:
- по /user должен отправляться user.toString() (класс User описать с несколькими полями),
- по /message должно отправляться message.toString() (класс Message описать с несколькими полями).

4.	*Создать отдельный класс (компонент), который будет предоставлять два метода: createUser, createMessage.
 Данные методы должны вызываться в контроллере (из пункта 3) для формирования объектов user и message.

5.	*Сделать значения полей объектов константными, чтобы они брались из application.properties.


[__Part 2__]
1. Написать простую HTML страницу, содержащую заголовок, список, таблицу и форму с несколькими полями.
--auth.html
2.	Изменить ее оформление с помощью CSS.
--style.css
3.	Сконфигурировать Spring для работы с HTML (Thymeleaf).
4.	Написать endpoint для получения данной страницы в браузере по GET-запросу.


[__Part 3__]
1.	Подключить Thymeleaf к проекту.

2.	Создать класс Person с тремя полями: имя, пол, возраст.

3.	Создать объект класса Person тремя способами:
•	С помощью значений из параметров запроса.
•	С помощью значений из формы, отправленной GET-запросом.
•	С помощью значений из формы, отправленной POST-запросом.

4.	Для формы POST реализовать паттерн PRG.

5.	Каждый Person, полученный из формы POST, должен сохраняться в список.
Данный список необходимо отображать на HTML-странице в виде таблицы.

6.	После отправки формы методом POST необходимо выводить таблицу из пункта 5.

7.	*Реализовать отдельный метод, позволяющий выводить таблицу в нужном виде:
с помощью параметров запроса должна быть возможность настроить количество выводимых объектов, порядок сортировки, поле для сортировки.
Пример: нужно вывести 5 объектов, отсортированных по возрастанию по возрасту.

8.	*Заменить input для пола человека на SELECT-input (специальный ввод значения из выпадающего списка).

9.	*Описать отдельную форму с двумя полями: первое – название поля для фильтрации, второе – значение поля.
По данным формы необходимо удалить совпадающие объекты из списка Person. После удаления вывести таблицу со всеми Person.
Пример: введены «пол» и «мужчина», необходимо удалить всех мужчин из списка.

10.	*Реализовать стандартное меню, открывающееся сразу при запуске приложения (localhost:8080).
В меню должен быть выбор (кнопки):
1)	Перейти на страницу заполнения GET-формы.
2)	Перейти на страницу заполнения POST-формы.
3)	Перейти на страницу с формой для удаления объектов.
4)	Просмотреть список Person.
